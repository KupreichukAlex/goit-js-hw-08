{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_array_with_holes.js","node_modules/@swc/helpers/lib/_iterable_to_array.js","node_modules/@swc/helpers/lib/_non_iterable_rest.js","node_modules/@swc/helpers/lib/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/lib/_array_like_to_array.js","node_modules/@swc/helpers/lib/_sliced_to_array.js","src/js/03-feedback.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _arrayWithHoles;\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _iterableToArray;\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _nonIterableRest;\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _unsupportedIterableToArray;\nvar _arrayLikeToArray = _interopRequireDefault(require(\"./_array_like_to_array\"));\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, _arrayLikeToArray).default(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, _arrayLikeToArray).default(o, minLen);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _arrayLikeToArray;\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _slicedToArray;\nvar _arrayWithHoles = _interopRequireDefault(require(\"./_array_with_holes\"));\nvar _iterableToArray = _interopRequireDefault(require(\"./_iterable_to_array\"));\nvar _nonIterableRest = _interopRequireDefault(require(\"./_non_iterable_rest\"));\nvar _unsupportedIterableToArray = _interopRequireDefault(require(\"./_unsupported_iterable_to_array\"));\nfunction _slicedToArray(arr, i) {\n    return (0, _arrayWithHoles).default(arr) || (0, _iterableToArray).default(arr, i) || (0, _unsupportedIterableToArray).default(arr, i) || (0, _nonIterableRest).default();\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","import { throttle } from \"lodash\";\n// ключ до локального сховища\nconst LOCALSTORAGE_KEY = 'feedback-form-state'; \nconst inputForm = document.querySelector('.feedback-form');\nlet localStorageFormData = {};\n\n// при першому завантаженні сторінки перевіряємо чи є якісь дані в localstorage\ninitForm();\n\ninputForm.addEventListener('input', onFormInputContent);\ninputForm.addEventListener('submit', onInputFormSub);\ninputForm.addEventListener('change', throttle(onInputChange, 500));\n\n// за допомогою FormData збираємо дані із усіх полів,\n// за допомогою методу forEach отримуємо ці дані у вигляді об'єкту\nfunction onFormInputContent(evt) {\n    evt.preventDefault();\n    const formData = new FormData(inputForm);\n    formData.forEach((value, name) => console.log(value, name));\n};\n\n// - прослуховуємо зміни в формі за допомогою 'change';\n// - cтворюємо окрему перемінну з пустим об'єктом, в якому будемо зберігати дані із форми;\n// - [evt.target.name] = evt.target.value; - це значення input, якому відповідає значення textarea;\n// - зберігаємо отримані значення в сховище за допомогою setItem, приводимо ці значення у вигляд рядка,\n// оскільки ми працюємо з об'єктом;\n// - виводимо в консоль для перевірки;\n\nfunction onInputChange (evt){\n    localStorageFormData[evt.target.name] = evt.target.value;\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(localStorageFormData));\n    console.log('Отримані дані з форми:', localStorageFormData);\n\n    //варіант, якщо не використовувати пустий об'єкт:\n    // let persistedForm = localStorage.getItem(LOCALSTORAGE_KEY);\n    // persistedForm = persistedForm ? JSON.parse(persistedForm) : {};\n    // persistedForm[evt.target.name] = evt.target.value;\n    // localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(persistedForm));\n}\n\n// - перевіряємо чи заповнені всі поля, якщо так - відправляємо дані та \n// очищаємо локальне  сховище та форму, якщо ні виводимо повідомлення про те, що всі поля\n// треба заповнити\nfunction onInputFormSub(evt) {\n    evt.preventDefault();\n    const formElements = evt.currentTarget.elements;\n    const email = formElements.email.value;\n    const message = formElements.message.value;\n\n    const formInputEl = {\n        email,\n        message,\n    };\n    \n    if(email === `` || message === ``){\n        windowAlertText(formInputEl);\n    } else {\n        evt.currentTarget.reset();\n        localStorage.removeItem(LOCALSTORAGE_KEY);\n        console.log('Дані відправлено! Форма очищена.')\n    }\n    function windowAlertText (){\n        window.alert(`Всі поля мають бути заповнені!`);\n    };\n}\n\n// - отримуємо дані зі сховища\n// - перевіряємо чи є дані в сховищі і якщо там щось було, парсимо дані \n// - за допомогою методу об'єкта Object.entries() створюємо масив даних і перебираємо його за допомогою \n// forEach(), визначаємо значення які були збережені в пам'яті і додаємо їх назад у форму\n\nfunction initForm(){\nlet persistedForm = localStorage.getItem(LOCALSTORAGE_KEY);\nconsole.log('Збережені дані в сховищі:', persistedForm);\nif(persistedForm){\n        persistedForm = JSON.parse(persistedForm);\n        Object.entries(persistedForm).forEach(([name, value]) => {\n        localStorageFormData[name] = value;\n        inputForm.elements[name].value = value;\n        });\n    }   \n}\n\n// перший варіант ДЗ\n// import { throttle } from \"lodash\";\n// const LOCALSTORAGE_KEY = 'feedback-form-state';\n// const inputForm = document.querySelector('.feedback-form');\n\n// initForm();\n\n// inputForm.addEventListener('input', onFormInputContent);\n// inputForm.addEventListener('submit', onInputFormSub);\n// inputForm.addEventListener('change', throttle(onInputChange, 500));\n\n// function onFormInputContent(evt) {\n    \n//     const formData = new FormData(inputForm);\n//     formData.forEach((value, name) => console.log(value, name));\n// };\n\n// function onInputFormSub(evt) {\n//     evt.preventDefault();\n//     evt.currentTarget.reset();\n//     localStorage.removeItem(LOCALSTORAGE_KEY);\n    \n// }\n\n// function onInputChange (evt){\n//     let persistedForm = localStorage.getItem(LOCALSTORAGE_KEY);\n//     persistedForm = persistedForm ? JSON.parse(persistedForm) : {};\n//     persistedForm[evt.target.name] = evt.target.value;\n//     localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(persistedForm));\n// }\n\n// function initForm(){\n// let persistedForm = localStorage.getItem(LOCALSTORAGE_KEY);\n// if(persistedForm){\n//     persistedForm = JSON.parse(persistedForm);\n//     Object.entries(persistedForm).forEach(([name, value]) => {\n//         inputForm.elements[name].value = value;\n//     });\n// }\n// }\n\n\n// якщо треба зберігати дані лише з одного поля форми\n// import { throttle } from \"lodash\";\n\n// const STORAGE_KEY = 'feedback-form-state';\n\n// const refs = {\n//     form: document.querySelector('.feedback-form'),\n//     textarea: document.querySelector('.feedback-form textarea')\n// };\n\n// refs.form.addEventListener('submit', onFormSubmit);\n// refs.textarea.addEventListener('input', throttle(onTextAreaInput, 500));\n\n// // при першому завантаженні сторінки перевіряємо чи є якісь дані в localstorage\n// initForm();\n\n// // - отримуємо значення інпуту та textarea\n// // - зберігаємо це значення в localstorage\n// function onTextAreaInput(evt){\n//     const message = evt.target.value;\n//     localStorage.setItem(STORAGE_KEY, message);\n// }\n\n// // - відміняємо поведінку за замовчуванням при сабміті\n// // - видаляємо повідомлення із localstorage\n// // - очищаємо форму\n// function onFormSubmit(evt) {\n//     evt.preventDefault();\n//     evt.currentTarget.reset();\n//     localStorage.removeItem(STORAGE_KEY);\n//     console.log('Дані відправлено! Форма очищена.')\n// }\n// // - отримуємо дані зі сховища\n// // - якщо там щось було - оновлюємо DOM\n// function initForm() {\n//     const savedMessage = localStorage.getItem(STORAGE_KEY);\n//     if (savedMessage) {\n//         console.log('Збережені дані в локальному сховищі:', savedMessage);\n//         refs.textarea.value = savedMessage;\n//     }\n// }\n"],"names":["Object","defineProperty","module","exports","value","default","arr","Array","isArray","iter","Symbol","iterator","from","TypeError","o","minLen","$7a2c4c4c44c69707$var$_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","test","obj","parcelRequire","__esModule","len","length","i","arr2","$111a013c31e2261e$exports","$111a013c31e2261e$var$_arrayWithHoles","$111a013c31e2261e$var$_iterableToArray","$111a013c31e2261e$var$_unsupportedIterableToArray","$111a013c31e2261e$var$_nonIterableRest","$111a013c31e2261e$var$_interopRequireDefault","persistedForm","$b00c40859be242c5$var$LOCALSTORAGE_KEY","$b00c40859be242c5$var$inputForm","document","querySelector","$b00c40859be242c5$var$localStorageFormData","localStorage","getItem","console","log","JSON","parse","entries","forEach","param","_param","elements","addEventListener","evt","preventDefault","FormData","formElements","currentTarget","email","message","window","alert","reset","removeItem","$1WSnx","throttle","target","setItem","stringify"],"version":3,"file":"03-feedback.216c8b15.js.map"}